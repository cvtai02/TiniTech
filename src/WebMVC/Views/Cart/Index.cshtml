@model List<WebSharedModels.Dtos.Orders.OrderItemDto>
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Shopping Cart</li>
                </ol>
            </nav>
            
            <h1 class="mb-4">Your Shopping Cart</h1>
            
            <div class="card">
                <div class="card-body">
                    @await Component.InvokeAsync("CartItemList", new { items = Model })
                </div>
            </div>
            
            <div class="mt-4">
                <h4>Have a promo code?</h4>
                <div class="d-flex mt-2">
                    <input type="text" class="form-control me-2" id="promoCode" placeholder="Enter promo code" style="max-width: 250px;">
                    <button class="btn btn-outline-secondary" type="button" id="applyPromo">Apply</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle quantity increase
            $(document).on('click', '.increase-quantity', function() {
                const productId = $(this).data('product-id');
                const variantId = $(this).data('variant-id');
                const quantityInput = $(this).siblings('.quantity-input');
                const currentQty = parseInt(quantityInput.val());
                
                // Update cart via AJAX (implement this)
                updateCartItem(productId, variantId, currentQty + 1);
            });
            
            // Handle quantity decrease
            $(document).on('click', '.decrease-quantity', function() {
                const productId = $(this).data('product-id');
                const variantId = $(this).data('variant-id');
                const quantityInput = $(this).siblings('.quantity-input');
                const currentQty = parseInt(quantityInput.val());
                
                if (currentQty > 1) {
                    // Update cart via AJAX (implement this)
                    updateCartItem(productId, variantId, currentQty - 1);
                }
            });
            
            // Handle item removal
            $(document).on('click', '.remove-item', function() {
                const productId = $(this).data('product-id');
                const variantId = $(this).data('variant-id');
                
                // Remove from cart via AJAX (implement this)
                removeCartItem(productId, variantId);
            });
            
            // Placeholder functions - implement these with your actual API endpoints
            function updateCartItem(productId, variantId, quantity) {
                // TODO: Implement API call to update cart
                console.log(`Update item: product ${productId}, variant ${variantId}, qty ${quantity}`);
                
                // Reload the page or update the cart UI
                location.reload();
            }
            
            function removeCartItem(productId, variantId) {
                // TODO: Implement API call to remove item from cart
                console.log(`Remove item: product ${productId}, variant ${variantId}`);
                
                // Reload the page or update the cart UI
                location.reload();
            }
            
            // Promo code handling
            $('#applyPromo').click(function() {
                const promoCode = $('#promoCode').val().trim();
                if (promoCode) {
                    // TODO: Implement promo code application
                    console.log(`Applying promo code: ${promoCode}`);
                    alert('Promo code functionality will be implemented soon.');
                }
            });
        });
    </script>
}