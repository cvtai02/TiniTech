@using WebMVC.Models
@model ProductViewModel

@{
    var product = Model.Product;
    var relatedProducts = Model.RelatedProducts;

    var sortedProductImages = product.Images
        .OrderBy(img => img.ImageUrl == product.DefaultImageUrl ? 0 : img.OrderPriority)
        .ToList();
    
    // Initialize main image index to the default image
    var mainImageIndex = 0;
    if (product.DefaultImageUrl != null)
    {
        var defaultIndex = product.Images.FindIndex(img => img.ImageUrl == product.DefaultImageUrl);
        if (defaultIndex >= 0)
        {
            mainImageIndex = defaultIndex;
        }
    }
}
<div class="px-6 md:px-12">
    
<div class="grid grid-cols-2 gap-8 max-w-[1280px] mx-auto my-8">
    <div class="col-span-2 md:col-span-1 grid grid-cols-7">
        <!-- Thumbnail Images - Left side -->
        <div class="col-span-1 relative">
            <div id="thumbnailContainer" 
                 class="overflow-y-auto pr-2 scrollbar-thin rounded aspect-[1/6]
                        [&::-webkit-scrollbar]:w-2
                        [&::-webkit-scrollbar-track]:rounded-full
                        [&::-webkit-scrollbar-thumb]:rounded-full
                        [&::-webkit-scrollbar-track]:bg-neutral-700
                        [&::-webkit-scrollbar-thumb]:bg-neutral-500">
                <div class="flex flex-col gap-2">
                    @foreach (var (image, index) in sortedProductImages.Select((img, i) => (img, i)))
                    {
                        var actualIndex = Array.FindIndex(product.Images.ToArray(), img => img.Id == image.Id);
                        var isDefault = image.ImageUrl == product.DefaultImageUrl;
                        
                        <div id="thumbnail-@actualIndex" 
                             class="cursor-pointer rounded-lg mr-2 aspect-square"
                             onclick="selectMainImage(@actualIndex)">
                            <img src="@image.ImageUrl" 
                                 alt="@product.Name thumbnail @(index + 1)" 
                                 class="object-cover w-full h-full rounded border-2 @(actualIndex == mainImageIndex ? "border-blue-600":"")" />
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Main Product Image - Right side -->
        <div class="col-span-6 bg-white rounded-lg aspect-square relative">
            <img id="mainImage" 
                 src="@(product.Images.Count > 0 ? product.Images[mainImageIndex].ImageUrl : "")" 
                 alt="@product.Name" 
                 class="w-full h-full object-cover rounded" 
                 onerror="this.onerror=null; this.parentElement.innerHTML='<div class=\'w-full h-full flex items-center justify-center bg-gray-100 rounded\'><p class=\'text-gray-500\'>No image available</p></div>';" />
        </div>
    </div>

    <div class="col-span-2 md:col-span-1">
        <div class="bg-white rounded-xl transition-all duration-300">
            <!-- Name -->
            <div class="mb-6 flex items-center">
                <h1 class="text-3xl font-medium text-gray-800">@product.Name</h1>
            </div>

            <!-- Inventory -->
            <div class="flex flex-wrap items-center gap-6 mb-6 pb-1 border-b">
                <div class="flex justify-between w-full gap-2 items-center">
                    <div>
                        <label class="font-medium text-gray-700 mr-2">SKU: </label>
                        @if (product.Attributes.Count > 0)
                        {
                            <span class="text-gray-800 font-semibold" id="selectedSku">
                                @product.Sku
                            </span>
                        }
                        else
                        {
                            <span class="text-gray-800 font-semibold">@product.Sku</span>
                        }
                    </div>
                    <div class="flex gap-4 items-center">
                        <div class="border-l pl-1 border-gray-300 flex items-center">
                            <span id="soldDisplay" class="font-medium text-blue-700">@product.Sold sold</span>
                        </div>
                        <div class="border-l pl-1 border-gray-300 flex items-center">
                            <span id="stockDisplay" class="font-medium text-green-700">
                                @product.Stock left
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rating -->
            <div class="flex items-center mb-6 rounded-lg">
                <div class="flex text-yellow-400">
                    @for (var i = 0; i < 5; i++)
                    {
                        <svg class="w-5 h-5 @(i < Math.Round(product.Rating) ? "text-yellow-400" : "text-gray-300")"
                             fill="currentColor"
                             viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                    }
                </div>
                <span class="ml-3 text-gray-600 font-medium">
                    @product.Rating <span class="text-gray-500">(@product.RatingCount reviews)</span>
                </span>
            </div>

            <!-- Price -->
            <div class="mb-8 rounded-r-lg w-full">
                @if (product.Attributes.Count > 0)
                {
                    <div class="text-3xl font-bold text-primary" id="selectedPrice">$@product.Price</div>
                }
                else
                {
                    <div class="text-3xl font-bold text-primary">$@product.Price</div>
                }
            </div>

            <div class="space-y-8 mb-8">
                @foreach (var attribute in product.Attributes.OrderBy(a => a.OrderPriority))
                {
                    <div class="">
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="font-medium">@(attribute.Name)</h3>
                        </div>
                        <div class="flex gap-4 flex-wrap">
                            @foreach (var item in attribute.Values)
                            {
                                <button 
                                    class="attribute-select border rounded-sm flex gap-4 items-center justify-center h-12 min-w-12 p-2 relative transition-all duration-200"
                                    data-attribute-id="@(attribute.AttributeId)"
                                    data-value="@item.Value"
                                    onclick="selectAttribute(@(attribute.AttributeId), '@item.Value', this)">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" alt="@item.Value" class="inline-block w-auto h-full aspect-square object-cover rounded-sm" />
                                    }
                                    <span class="">@item.Value</span>
                                    
                                </button>
                            }
                        </div>
                    </div>
                }
                
                <!-- Quantity Selector -->
                <div class="bg-white hover:border-gray-200 transition-all duration-300">
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="font-medium text-gray-800">Quantity</h3>
                        
                    </div>
                    <div class="flex items-center border border-gray-300 rounded-sm w-36">
                        <button type="button" 
                                onclick="decreaseQuantity()" 
                                class="flex-shrink-0 text-gray-600 hover:text-gray-800 w-10 h-10 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                            </svg>
                        </button>
                        <input type="text" 
                               value="1" 
                               id="quantityInput"
                               class="text-center w-full border-0 focus:ring-0 px-0"
                               oninput="validateQuantity(this)"
                               onkeypress="return isNumberKey(event)">
                        <button type="button" 
                                onclick="increaseQuantity()" 
                                class="flex-shrink-0 text-gray-600 hover:text-gray-800 w-10 h-10 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                        </button>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
                    <button type="button" 
                            onclick="addToCart()" 
                            class="flex-1 bg-black text-white font-medium py-3 px-6 rounded-sm transition-colors duration-200">
                        Add to Cart
                    </button>
                    <button type="button" 
                            onclick="buyNow()" 
                            class="flex-1  border-black border text-black hover:bg-black hover:text-white font-medium py-3 px-6 rounded-sm transition-colors duration-200">
                        Buy Now
                    </button>
                </div>

                <script>
                    function isNumberKey(evt) {
                        var charCode = (evt.which) ? evt.which : evt.keyCode;
                        if (charCode > 31 && (charCode < 48 || charCode > 57))
                            return false;
                        return true;
                    }
                    
                    function increaseQuantity() {
                        const input = document.getElementById('quantityInput');
                        const maxStock = selectedVariant ? selectedVariant.stock : @product.Stock;
                        const currentVal = parseInt(input.value) || 0;
                        if (currentVal < maxStock) {
                            input.value = currentVal + 1;
                        }
                    }

                    function decreaseQuantity() {
                        const input = document.getElementById('quantityInput');
                        const currentVal = parseInt(input.value) || 0;
                        if (currentVal > 1) {
                            input.value = currentVal - 1;
                        } else {
                            input.value = 1;
                        }
                    }

                    function validateQuantity(el) {
                        const maxStock = selectedVariant ? selectedVariant.stock : @product.Stock;
                        const currentVal = parseInt(el.value) || 0;
                        
                        if (currentVal <= 0 || isNaN(currentVal)) {
                            el.value = 1;
                        } else if (currentVal > maxStock) {
                            el.value = maxStock;
                        }
                    }
                    
                    function addToCart() {
                        const quantity = parseInt(document.getElementById('quantityInput').value) || 1;
                        const productId = '@product.Id';
                        const variantId = selectedVariant ? selectedVariant.id : null;
                        
                        // Create cart item object
                        const cartItem = {
                            productId,
                            variantId,
                            quantity,
                            selectedAttributes,
                            name: '@product.Name',
                            price: selectedVariant ? selectedVariant.price : parseFloat(@product.Price),
                            imageUrl: '@(product.Images.Count > 0 ? product.Images[mainImageIndex].ImageUrl : "")',
                            timestamp: new Date().getTime()
                        };
                        
                        // Get existing cart or initialize new one
                        let cart = JSON.parse(localStorage.getItem('cart') || '[]');
                        
                        // Check if product+variant already exists in cart
                        const existingItemIndex = cart.findIndex(item => 
                            item.productId === productId && 
                            item.variantId === variantId
                        );
                        
                        if (existingItemIndex >= 0) {
                            // Update quantity if item exists
                            cart[existingItemIndex].quantity += quantity;
                        } else {
                            // Add new item if it doesn't exist
                            cart.push(cartItem);
                        }
                        
                        // Save back to localStorage
                        localStorage.setItem('cart', JSON.stringify(cart));
                        
                        // Update cart count indicator
                        updateCartCount();
                        
                        // Show confirmation message
                        toast('Product added to your cart!');
                    }
                    
                    // Function to update the cart count in the UI
                    
                    
                    function buyNow() {
                        console.log('Buy Now clicked!');
                        // Show the address modal instead of immediately redirecting
                        showAddressModal();
                    }
                </script>
            </div>
        </div>
    </div>

    <div class="col-span-2 mt-8 p-4 bg-white rounded-lg">
        <h2 class="text-xl font-semibold text-black mb-4">
            Description
        </h2>
        <p class="">@product.Description</p>
    </div>
    <div class="col-span-2 mt-8 p-4 bg-white rounded-lg"></div>
        @await Component.InvokeAsync("RatingViewComponent")
    </div>
    <!-- Related Products Section -->
    <div class="col-span-2 mt-8">
        <div class="container mx-auto max-w-[1280px]">
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-2xl font-bold text-black">Related Products</h2>
            </div>
            
            @if (relatedProducts != null && relatedProducts.Any())
            {
                <partial name="Components/ProductList/Default" model="relatedProducts" />
            }
            else
            {
                <p class="text-gray-500 text-center py-8">No related products found</p>
            }
        </div>
    </div>
</div>

<!-- Address Modal -->
<div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 items-center justify-center hidden">
    <div class="bg-white rounded-lg w-full max-w-md p-6 max-h-[90vh] overflow-y-auto">
        <!-- Modal Header with Login/Register -->
        <div class="flex justify-between items-center mb-6 pb-3 border-b">
            <h3 class="text-xl font-semibold text-gray-800">Shipping Information</h3>
            <div class="flex gap-2">
                <a href="/Identity/Account/Login" class="text-primary hover:text-black font-medium">Login</a>
                <span class="text-gray-500">|</span>
                <a href="/Identity/Account/Register" class="text-primary hover:text-black font-medium">Register</a>
            </div>
        </div>
        
        <!-- Address Form -->
        <form id="addressForm" class="space-y-4">
            <div class="border-b-black border-b">
                <label for="receiverName" class="block text-sm font-medium text-gray-700">Receiver Name</label>
                <input type="text" id="receiverName" name="receiverName" required
                       class="block w-full text-primary rounded-sm shadow-sm ">
            </div>
            
            <div class="border-b-black border-b">
                <label for="phoneNumber" class="block text-sm font-medium text-gray-700">Phone Number</label>
                <input type="tel" id="phoneNumber" name="phoneNumber" required
                       class="block w-full rounded-sm text-primary border-gray-300 shadow-sm focus:border-black focus:ring-black">
            </div>

            <div class="border-b-black border-b">
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <input type="email" id="email" name="email" required
                       class="block w-full rounded-sm text-primary border-gray-300 shadow-sm focus:border-black focus:ring-black">
            </div>
            
            <div class="border-b-black border-b">
                <label for="city" class="block text-sm font-medium text-gray-700">City</label>
                <input type="text" id="city" name="city" required
                       class="block w-full rounded-sm text-primary border-gray-300 shadow-sm focus:border-black focus:ring-black">
            </div>
            
            <div class="border-b-black border-b">
                <label for="district" class="block text-sm font-medium text-gray-700">District</label>
                <input type="text" id="district" name="district" required
                       class="block w-full rounded-sm text-primary border-gray-300 shadow-sm focus:border-black focus:ring-black">
            </div>
            
            <div class="border-b-black border-b">
                <label for="ward" class="block text-sm font-medium text-gray-700">
                    Ward
                </label>
                <input 
                    type="text" 
                    id="ward" 
                    name="ward" 
                    required
                    class="block w-full text-primary rounded-sm border-gray-300 shadow-sm focus:border-black focus:ring-black"
                >
            </div>
            
            <div class="border-b-black border-b">
                <label for="detailAddress" class="block text-sm font-medium text-gray-700">
                    Detail Address
                </label>
                <input 
                    id="detailAddress" 
                    name="detailAddress" 
                    rows="2" 
                    required
                    class="block w-full text-primary rounded-sm border-gray-300 shadow-sm focus:border-black focus:ring-black"
                ></input>
            </div>
            
            <div class="flex justify-between gap-3 pt-4">
                <button 
                    type="button" 
                    onclick="closeAddressModal()"
                    class="px-4 py-2 border border-gray-300 rounded-sm text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black"
                >
                    Cancel
                </button>
                <button 
                    type="submit"
                    class="px-4 py-2 bg-black text-white rounded-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black"
                >
                    Proceed to Checkout
                </button>
            </div>
        </form>
    </div>
</div>
</div>
<style>
    .invalid-value-button::after {
        content: '';
        position: absolute;
        top: -20.75%;
        width: 1px; 
        height: 141.5%;
        background-color: black;
        transform: rotate(45deg);
        transform-origin: middle;
    }
</style>

@section Scripts {
    <script>
        // Product data for JS to use
        const productData = @Html.Raw(Json.Serialize(product));
        const productImages = @Html.Raw(Json.Serialize(product.Images));
        const productName = "@product.Name";
        const productId = "@product.Id";
        const productPrice = parseFloat("@product.Price");
        const productStock = @product.Stock;
        const mainImageUrl = "@(product.Images.Count > 0 ? product.Images[mainImageIndex].ImageUrl : "")";
    </script>
    <script src="~/js/product-detail.js"></script>
}