@using CrossCutting.Extensions
@using WebSharedModels.Dtos.Categories
@using WebSharedModels.Enums
@using WebMVC.Extensions
@using WebMVC.Services.Specifications
@model WebMVC.Models.CollectionViewModel
@{
    ViewData["Title"] = "Products";
    var pagination = Model.Products;
    var categories = Model.Categories;
    var products = Model.Products.Items;
    var queryParameters = Model.QueryParameters;

    var currentRootCategory = categories.FirstOrDefault(c => c.Slug == Model.QueryParameters.CategorySlug);
    if (currentRootCategory == null)
    {
        currentRootCategory = categories.FirstOrDefault(c => c.Subcategories.Any(s => s.Slug == Model.QueryParameters.CategorySlug));
    }
    var currentSubCategory = currentRootCategory?.Subcategories.FirstOrDefault(s => s.Slug == Model.QueryParameters.CategorySlug);

    var sortDictionary = new Dictionary<string, FrontStoreOrderEnum>
    {
        { "Nổi bật nhất", FrontStoreOrderEnum.MostFeatured },
        { "Best Selling",  FrontStoreOrderEnum.BestSelling },
        { "Đánh giá cao",  FrontStoreOrderEnum.HighestRated },
        { "Giá: Cao tới thấp",  FrontStoreOrderEnum.PriceHighToLow },
        { "Giá: Thấp tới Cao",  FrontStoreOrderEnum.PriceLowToHigh },
    };

    categories.Add(new CategoryDto
    {
        Slug = "whatever",
        Name = "Tất cả",
    });

    currentRootCategory?.Subcategories.Add(new CategoryDto
    {
        Slug = currentRootCategory.Slug,
        Name = currentRootCategory.Name,
    });


    var currentSortOption = Model.QueryParameters.Order;
}

<link rel="stylesheet" href="~/css/collection.css" />
<div class=" px-6 md:px-12"> 
<div class="max-w-[1280px] my-8 mx-auto">
    <section class=""> 
        <div class=" container mx-auto border-b border-gray pb-1 mb-4 grid grid-cols-1 md:grid-cols-3 gap-4 max-w-[1280px]">
            @* Category dropdown *@
            <div class=" flex items-baseline gap-6 "> 
                <nav class="filter-item relative ">
                    <div class="cursor-pointer font-medium inline-flex items-baseline text-2xl transition-colors">
                        @(currentRootCategory != null ? currentRootCategory.Name : "Tất cả danh mục")
                        <div class="ml-2 flex indicator w-4 h-4 rounded-full  bg-gradient-to-r from-teal-200 to-teal-500 p-1">
                            <div class="absolute w-2 h-2 rounded-full z-20 mx-auto my-auto bg-white">
                            </div>
                        </div>
                    </div>
                    <ul class="dropdown-menu py-2 text-gray-700">
                        @foreach (var category in Model.Categories )
                        {
                            var itemQuery = queryParameters.ShallowClone();
                                itemQuery.CategorySlug = category.Slug;
                                itemQuery.Page = 1; // Reset to the first page when sorting
                            <li class="category-item">
                                <a href="@itemQuery.ToCollectionHref()" class="block">@category.Name</a>
                                @if (category.Subcategories?.Count > 0)
                                {
                                    <ul class="subcategory-menu py-2 text-gray-700">
                                        @foreach (var subcategory in category.Subcategories)
                                        {
                                            var subItemQuery = queryParameters.ShallowClone();
                                                subItemQuery.CategorySlug = subcategory.Slug;
                                                subItemQuery.Page = 1; // Reset to the first page when sorting
                                            <li>
                                                <a href="@subItemQuery.ToCollectionHref()" class="block px-4 py-2 hover:text-primary">
                                                    @subcategory.Name
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                }
                            </li>
                        }
                    </ul>
                </nav>
                
                @* subcategory dropdown *@
                @if (currentSubCategory != null){
                        <div class="filter-item relative">
                            <div class="cursor-pointer font-light inline-flex items-baseline text-2xl transition-colors">
                                @(currentSubCategory.Name)
                                <div class="flex ml-2 w-4 h-4 rounded-full bg-gradient-to-r from-blue-200 to-cyan-200 p-1">
                                    <div class="absolute w-2 h-2 rounded-full z-20 mx-auto my-auto bg-white">
                                    </div>
                                </div>
                            </div>
                            <ul class="dropdown-menu py-2 text-gray-700">
                                @if(currentRootCategory != null && currentRootCategory.Subcategories?.Count > 0){
                                    @foreach (var category in currentRootCategory.Subcategories)
                                    {
                                            var itemQuery = queryParameters.ShallowClone();
                                            itemQuery.CategorySlug = category.Slug;
                                            itemQuery.Page = 1; // Reset to the first page when sorting
                                        <li class="category-item">
                                            <a href="@itemQuery.ToCollectionHref()" class="block">@category.Name</a>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        
                }
            </div>
            @* Search box *@
            <div class="justify-center flex items-end w-full"> 
                <div class="filter-item flex flex-grow relative">
                    <form 
                    id="searchForm" 
                    class="flex-grow mx-auto" 
                    onsubmit="handleSearch(event)">   
                        <div class="relative">
                            <button type="submit"
                                    class="absolute inset-y-0 start-0 flex items-center ">
                                <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                                </svg>
                            </button>
                            <input type="search" 
                                   id="searchInput"
                                   value="@Model.QueryParameters.Search"
                                   class="block w-full ps-10" 
                                   placeholder="Tìm theo tên, SKU, slug" />
                        </div>
                    </form>                
                </div>
            </div>
            
            @* Sort & Filter options *@
            <div class="justify-end items-end flex"> 
                <div class="filter-item relative">
                    <div class="cursor-pointer flex gap-2">
                        <svg 
                            class="w-6 h-6 text-gray-800" 
                            aria-hidden="true" xmlns="http://www.w3.org/2000/svg" 
                            width="24" height="24" 
                            fill="none" 
                            viewBox="0 0 24 24">
                            <path 
                                stroke="currentColor" 
                                stroke-linecap="round" 
                                stroke-linejoin="round" 
                                stroke-width="2" 
                                d="M8 20V7m0 13-4-4m4 4 4-4m4-12v13m0-13 4 4m-4-4-4 4"/>
                        </svg>
                        @(sortDictionary.FirstOrDefault(o => o.Value == currentSortOption).Key ?? sortDictionary.First().Key)
                    </div>
                    <div class="dropdown-menu left">
                        <ul class="py-2 text-sm text-gray-700">
                            @foreach (var option in sortDictionary)
                            {
                                var itemQuery = queryParameters.ShallowClone();
                                itemQuery.Order = option.Value;
                                itemQuery.Page = 1; // Reset to the first page when sorting

                                <li class="sort-option">
                                    <a href="@(itemQuery.ToCollectionHref())" class="block px-4 py-2 hover:text-primary">
                                        @option.Key
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <partial name="Components/ProductList/Default" model="Model.Products.Items" />

        <nav aria-label="Collections pagination" class="flex items-center justify-center mt-4">
            <ul class="flex items-center -space-x-px h-8 text-sm">
                <li>
                    @{
                        var preHref = queryParameters.SetClonePage(pagination.PageNumber > 1 ? pagination.PageNumber - 1 : 1).ToCollectionHref();
                    }
                    <a href="@preHref" class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                        <span class="sr-only">Previous</span>
                        <svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
                        </svg>
                    </a>
                </li>

                @foreach (var pageNum in Enumerable.Range(1, pagination.TotalPages))
                {
                    var href = queryParameters.SetClonePage(pageNum).ToCollectionHref();
                    <li>
                        <a href="@href" class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                            @pageNum
                        </a>
                    </li>
                } 
                <li>
                    @{
                        var postHref = queryParameters.SetClonePage(pagination.PageNumber < pagination.TotalPages ? pagination.PageNumber + 1 :  pagination.TotalPages).ToCollectionHref();
                    }
                    <a href="@postHref" class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                        <span class="sr-only">Next</span>
                        <svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                        </svg>
                    </a>
                </li>
            </ul>
        </nav>
    </section>
</div>
</div>

@section Scripts {
    <script>
        function handleSearch(event) {
            event.preventDefault();
            const searchValue = document.getElementById('searchInput').value;
            const baseUrl = `@Html.Raw(queryParameters.SetCloneSearch(null).SetClonePage(1).ToCollectionHref())`;
            window.location.href = `${baseUrl}&search=${encodeURIComponent(searchValue)}`;
        }
    </script>
}